# Generated by CodiumAI

import pytest
from pydicom import Dataset

from dicom_event_broker_adapter.ups_event_mqtt_broker_adapter import _construct_mqtt_topic


class Test_ConstructMqttTopic:
    # Constructs base topic for "Worklist" subscription type
    def test_constructs_base_topic_for_worklist_subscription(self):
        result = _construct_mqtt_topic(event_type="Workitem", subscription_type="Worklist")
        assert result == "/workitems"

    # Constructs base topic for "FilteredWorklist" subscription type
    def test_constructs_base_topic_for_filtered_worklist_subscription(self):
        # Create filter dataset
        filter_ds = Dataset()
        filter_ds.PatientID = "12345"

        result = _construct_mqtt_topic(
            event_type="Workitem", subscription_type="FilteredWorklist", dicom_topic_filter=filter_ds
        )

        assert result == "/workitems"

    # Constructs workitem-specific topic without subtopic
    def test_constructs_topic_for_specific_workitem(self):
        workitem_uid = "1.2.3.4.5.6.7.8.9"

        result = _construct_mqtt_topic(event_type="Workitem", workitem_uid=workitem_uid)

        assert result == "/workitems/1.2.3.4.5.6.7.8.9"

    # Constructs workitem-specific topic with subtopic
    def test_constructs_topic_for_specific_workitem_with_subtopic(self):
        workitem_uid = "1.2.3.4.5.6.7.8.9"

        result = _construct_mqtt_topic(event_type="Workitem", workitem_uid=workitem_uid, workitem_subtopic="state")

        assert result == "/workitems/1.2.3.4.5.6.7.8.9/state"

    # Raises ValueError when workitem_uid is None but required
    def test_raises_value_error_when_workitem_uid_is_missing(self):
        with pytest.raises(ValueError, match="Invalid event type or missing workitem UID"):
            _construct_mqtt_topic(event_type="Workitem", workitem_uid=None)

    # Raises ValueError for invalid event type
    def test_raises_value_error_for_invalid_event_type(self):
        with pytest.raises(ValueError, match="Invalid event type or missing workitem UID"):
            _construct_mqtt_topic(event_type="InvalidType")
