# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      mosquitto:
        image: eclipse-mosquitto:2.0
        ports:
          - 1883:1883
        options: >-
          --health-cmd "mosquitto_sub -t test/topic -C 1 -E -v || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Install uv
      run: |
        python -m pip install --upgrade pip
        pip install uv

    - name: Check if lock file is in sync
      run: |
        if ! uv lock --check; then
          echo "::error::uv.lock is out of sync with pyproject.toml. Please run 'uv lock' locally and commit the updated lock file."
          exit 1
        fi

    - name: Set up virtual environment
      run: |
        uv venv .venv
        echo "${{ github.workspace }}/.venv/bin" >> $GITHUB_PATH

    - name: Cache virtual environment
      uses: actions/cache@v4
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ hashFiles('**/pyproject.toml') }}

    - name: Ensure cache is healthy
      if: steps.venv-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        timeout 10s .venv/bin/python -m pip --version || rm -rf .venv

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Lint with ruff
      run: |
        ruff check

    - name: Copy and verify Mosquitto config
      run: |
        # Get container ID
        CONTAINER_ID=$(docker ps -q --filter "ancestor=eclipse-mosquitto:2.0")
        echo "Mosquitto container ID: ${CONTAINER_ID}"

        # Check if the config file exists in the expected location
        if [ -f "${{ github.workspace }}/tests/config/mosquitto.conf" ]; then
          echo "Found mosquitto.conf file, copying to container"

          # Create config directory in container
          docker exec ${CONTAINER_ID} sh -c "mkdir -p /mosquitto/config"

          # Copy the config file
          docker cp ${{ github.workspace }}/tests/config/mosquitto.conf ${CONTAINER_ID}:/mosquitto/config/

          # Verify config was copied
          echo "Listing config directory:"
          docker exec ${CONTAINER_ID} ls -la /mosquitto/config/

          echo "Config file content:"
          docker exec ${CONTAINER_ID} cat /mosquitto/config/mosquitto.conf

          # Restart mosquitto to use the new config
          echo "Restarting Mosquitto with new config"
          # Don't kill the main process - this would stop the container
          # Instead, restart the service or use docker restart
          docker restart ${CONTAINER_ID}

          # Give the container time to restart
          sleep 5

          # Start mosquitto with the new config file
          docker exec ${CONTAINER_ID} sh -c "mosquitto -c /mosquitto/config/mosquitto.conf -d"

          # Wait for Mosquitto to start up
          echo "Waiting for Mosquitto to become healthy..."
          HEALTH_RETRIES=5
          HEALTH_INTERVAL=2

          for i in $(seq 1 $HEALTH_RETRIES); do
            echo "Health check attempt $i/$HEALTH_RETRIES..."
            if docker exec ${CONTAINER_ID} mosquitto_sub -t test/topic -C 1 -E -v; then
              echo "✅ Mosquitto broker is running and healthy"
              break
            fi

            # Check if service is still running
            if ! docker ps -q --filter "id=${CONTAINER_ID}" | grep -q .; then
              echo "⚠️ Mosquitto container stopped running"
              docker logs ${CONTAINER_ID}
              exit 1
            fi

            sleep $HEALTH_INTERVAL
          done
        else
          echo "No custom mosquitto.conf found. Using default configuration."
        fi

        # Verify Mosquitto is running
        echo "Checking if Mosquitto is running:"
        docker exec ${CONTAINER_ID} sh -c "ps aux | grep mosquitto"

    - name: Run unit tests with pytest
      run: |
        uv run pytest tests -m "not mqtt_integration"

    - name: Run integration tests with real Mosquitto
      run: |
        uv run pytest -m "mqtt_integration" -v
